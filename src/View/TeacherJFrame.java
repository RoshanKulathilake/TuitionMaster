/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Control.SubjectController;
import Control.TeacherController;
import Model.Teacher;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ItemEvent;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import javax.swing.SwingUtilities;

/**
 *
 * @author DK_Roshan
 */
public class TeacherJFrame extends javax.swing.JFrame {

    /**
     * Creates new form TeacherJFrame
     */
    public TeacherJFrame() {
        initComponents();
        getSubjectNames();
        getTeacherName();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchbuttonGroup = new javax.swing.ButtonGroup();
        genderbuttonGroup = new javax.swing.ButtonGroup();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        searchTeacherjComboBox = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        tMalejRadioButton = new javax.swing.JRadioButton();
        tFemalejRadioButton = new javax.swing.JRadioButton();
        jLabel7 = new javax.swing.JLabel();
        subjectjComboBox = new javax.swing.JComboBox<>();
        updatejButton = new javax.swing.JButton();
        deletejButton = new javax.swing.JButton();
        addjButton = new javax.swing.JButton();
        tTeljTextField = new javax.swing.JTextField();
        tNamejTextField = new javax.swing.JTextField();
        tNICTextField = new javax.swing.JTextField();
        degreejComboBox = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        subjectIDLeftjList = new javax.swing.JList<>(new DefaultListModel());
        jScrollPane2 = new javax.swing.JScrollPane();
        subjectIDsRightjList = new javax.swing.JList<>(new DefaultListModel());
        addSelectedjButton = new javax.swing.JButton();
        removeAlljButton = new javax.swing.JButton();
        addNewSubjectjButton = new javax.swing.JButton();
        removeSelectedjButton = new javax.swing.JButton();
        addAlljButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(880, 430));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jDesktopPane1.setBackground(new java.awt.Color(204, 204, 255));

        searchTeacherjComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                searchTeacherjComboBoxItemStateChanged(evt);
            }
        });

        jDesktopPane1.setLayer(searchTeacherjComboBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDesktopPane1Layout.createSequentialGroup()
                .addContainerGap(347, Short.MAX_VALUE)
                .addComponent(searchTeacherjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(324, 324, 324))
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDesktopPane1Layout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addComponent(searchTeacherjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        getContentPane().add(jDesktopPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 880, 70));

        jLabel3.setText("Teacher Name");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 95, -1, -1));

        jLabel4.setText("Teacher NIC");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 140, -1, -1));

        jLabel5.setText("Teacher Tel");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 181, -1, -1));

        jLabel6.setText("Gender");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 220, -1, -1));

        genderbuttonGroup.add(tMalejRadioButton);
        tMalejRadioButton.setText("Male");
        getContentPane().add(tMalejRadioButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(121, 221, -1, -1));

        genderbuttonGroup.add(tFemalejRadioButton);
        tFemalejRadioButton.setText("Female");
        getContentPane().add(tFemalejRadioButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(173, 221, -1, -1));

        jLabel7.setText("Degree");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 263, -1, -1));

        subjectjComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Subject Category" }));
        subjectjComboBox.setMinimumSize(new java.awt.Dimension(100, 30));
        subjectjComboBox.setPreferredSize(new java.awt.Dimension(120, 30));
        subjectjComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                subjectjComboBoxItemStateChanged(evt);
            }
        });
        subjectjComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subjectjComboBoxActionPerformed(evt);
            }
        });
        getContentPane().add(subjectjComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 90, 150, -1));

        updatejButton.setText("Update");
        updatejButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatejButtonActionPerformed(evt);
            }
        });
        getContentPane().add(updatejButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 320, 100, 53));

        deletejButton.setText("Delete");
        deletejButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletejButtonActionPerformed(evt);
            }
        });
        getContentPane().add(deletejButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 320, 100, 53));

        addjButton.setText("Add");
        addjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addjButtonActionPerformed(evt);
            }
        });
        getContentPane().add(addjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 320, 100, 53));

        tTeljTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tTeljTextFieldActionPerformed(evt);
            }
        });
        getContentPane().add(tTeljTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(121, 173, 211, 30));

        tNamejTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tNamejTextFieldActionPerformed(evt);
            }
        });
        getContentPane().add(tNamejTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(121, 87, 211, 30));

        tNICTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tNICTextFieldActionPerformed(evt);
            }
        });
        getContentPane().add(tNICTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(121, 132, 211, 30));

        degreejComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "B.Sc", "B.Com", "B.A" }));
        getContentPane().add(degreejComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(121, 260, -1, -1));

        jScrollPane1.setViewportView(subjectIDLeftjList);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(359, 143, 202, 137));

        jScrollPane2.setViewportView(subjectIDsRightjList);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 143, 203, 137));

        addSelectedjButton.setText(">");
        addSelectedjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSelectedjButtonActionPerformed(evt);
            }
        });
        getContentPane().add(addSelectedjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 180, 53, -1));

        removeAlljButton.setText("<<");
        removeAlljButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAlljButtonActionPerformed(evt);
            }
        });
        getContentPane().add(removeAlljButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 260, 53, -1));

        addNewSubjectjButton.setText("Add New Subject");
        addNewSubjectjButton.setMaximumSize(new java.awt.Dimension(120, 23));
        addNewSubjectjButton.setPreferredSize(new java.awt.Dimension(120, 30));
        addNewSubjectjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewSubjectjButtonActionPerformed(evt);
            }
        });
        getContentPane().add(addNewSubjectjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 90, 150, -1));

        removeSelectedjButton.setText("<");
        removeSelectedjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeSelectedjButtonActionPerformed(evt);
            }
        });
        getContentPane().add(removeSelectedjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 220, 53, -1));

        addAlljButton.setText(">>");
        addAlljButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAlljButtonActionPerformed(evt);
            }
        });
        getContentPane().add(addAlljButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 140, 53, -1));

        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });
        getContentPane().add(clearButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 320, 100, 53));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void updatejButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatejButtonActionPerformed
        
        if(tNamejTextField.getText().equals("") || degreejComboBox.getSelectedItem().toString().equals("") || tTeljTextField.getText().equals("")){
            JOptionPane.showMessageDialog(null,"No teacher is selected to update");
        }else{
            String updtTeacherName = tNamejTextField.getText();
            String updtTeacherNIC = tNICTextField.getText();
            int updtTacherTel = Integer.parseInt(tTeljTextField.getText());
        
            String updtTeacherGender = null;
            if(tMalejRadioButton.isSelected()){
                updtTeacherGender = "Male";
            }else if(tFemalejRadioButton.isSelected()){
                updtTeacherGender = "Female";
            }
            String updtTeacherDegree = degreejComboBox.getSelectedItem().toString();
            ListModel model = subjectIDsRightjList.getModel();
            ArrayList<String> tempArrList = new ArrayList<String>();
        
            for(int i=0; i < model.getSize(); i++){
                String val =  model.getElementAt(i).toString(); 
                tempArrList.add(val);    
            }
            Teacher teacher = new Teacher();
            teacher.setTeacherName(updtTeacherName);
            teacher.setTeacherNIC(updtTeacherNIC);
            teacher.setTeacherTel(updtTacherTel);
            teacher.setTeacherGender(updtTeacherGender);
            teacher.setTeacherDegree(updtTeacherDegree);
        
            int updtResultTeacher = TeacherController.updateTeacherDetails(teacher);
            int updtResultSubject = SubjectController.updateSubjectTeacherDetails(updtTeacherNIC,tempArrList);
        
            if(updtResultTeacher==1 && updtResultSubject==1 ){
                JOptionPane.showMessageDialog(null,"Record updated");
                reset();
                getTeacherName(); 
            }else{
                JOptionPane.showMessageDialog(null,"Error");
            }
        }
        
    }//GEN-LAST:event_updatejButtonActionPerformed

    private void tTeljTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tTeljTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tTeljTextFieldActionPerformed

    private void tNamejTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tNamejTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tNamejTextFieldActionPerformed

    private void tNICTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tNICTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tNICTextFieldActionPerformed

    private void removeAlljButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAlljButtonActionPerformed
        String selectedSubject = subjectjComboBox.getSelectedItem().toString();
        ArrayList<String> subjectIDs = new ArrayList<String>();
        subjectIDs = SubjectController.searchSubjectIDsNot(selectedSubject);
        
        DefaultListModel tempList = new DefaultListModel();
        DefaultListModel selectList = new DefaultListModel();
        
        for(int i = 0; i< subjectIDsRightjList.getModel().getSize();i++){
            
            String value = subjectIDsRightjList.getModel().getElementAt(i);
            tempList.addElement(value);
            ((DefaultListModel)selectList).removeElement(subjectIDs.get(i));
       
        }
        
        subjectIDLeftjList.setModel(tempList);
        subjectIDsRightjList.setModel(selectList);
    }//GEN-LAST:event_removeAlljButtonActionPerformed

    private void subjectjComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subjectjComboBoxActionPerformed
        
        
        
        
    }//GEN-LAST:event_subjectjComboBoxActionPerformed

    private void addAlljButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAlljButtonActionPerformed
        String selectedSubject = subjectjComboBox.getSelectedItem().toString();
        ArrayList<String> subjectIDs = new ArrayList<String>();
        subjectIDs = SubjectController.searchSubjectIDsNot(selectedSubject);
        
        DefaultListModel tempList = new DefaultListModel();
        DefaultListModel selectList = new DefaultListModel();
        
        for(int i = 0; i< subjectIDLeftjList.getModel().getSize();i++){
            
            String value = subjectIDLeftjList.getModel().getElementAt(i);
            selectList.addElement(value);
            ((DefaultListModel)tempList).removeElement(subjectIDs.get(i));
        }
        
        subjectIDLeftjList.setModel(tempList);
        subjectIDsRightjList.setModel(selectList);
    }//GEN-LAST:event_addAlljButtonActionPerformed

    private void addSelectedjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSelectedjButtonActionPerformed
        String selectedSubject = subjectjComboBox.getSelectedItem().toString();
        ArrayList<String> subjectIDs = new ArrayList<String>();
        subjectIDs = SubjectController.searchSubjectIDsNot(selectedSubject);
        
        
        int[] selectedItemIndices = subjectIDLeftjList.getSelectedIndices();
        for(int i=0;i<selectedItemIndices.length;i++){
            
            String value = (String) ((DefaultListModel)subjectIDLeftjList.getModel()).get(selectedItemIndices[i]-i);
            ((DefaultListModel)subjectIDsRightjList.getModel()).addElement(value);
            ((DefaultListModel)subjectIDLeftjList.getModel()).removeElement(value);
            //subjectIDs.remove(i);
        }
        
       
    }//GEN-LAST:event_addSelectedjButtonActionPerformed

    private void removeSelectedjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeSelectedjButtonActionPerformed
        String selectedSubject = subjectjComboBox.getSelectedItem().toString();
        ArrayList<String> subjectIDs = new ArrayList<String>();
        subjectIDs = SubjectController.searchSubjectIDsNot(selectedSubject);
        
        
        int[] selectedItemIndices = subjectIDsRightjList.getSelectedIndices();
        for(int i=0;i<selectedItemIndices.length;i++){
            
            String value = (String) ((DefaultListModel)subjectIDsRightjList.getModel()).get(selectedItemIndices[i]-i);
            ((DefaultListModel)subjectIDLeftjList.getModel()).addElement(value);
            ((DefaultListModel)subjectIDsRightjList.getModel()).removeElement(value);
            //subjectIDs.remove(i);
        }
    }//GEN-LAST:event_removeSelectedjButtonActionPerformed

    private void addNewSubjectjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewSubjectjButtonActionPerformed
        SubjectJFrame sJF = new SubjectJFrame(SubjectJFrame.LAUNCHFROMTEACHER){
            public void onClick(String val){
                getSubjectNames();
            }
        };
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        sJF.setLocation(dim.width/2-sJF.getSize().width/2, dim.height/2-sJF.getSize().height/2);
        sJF.setVisible(true);
        sJF.setDefaultCloseOperation(sJF.DISPOSE_ON_CLOSE);
        
        //getSubjectNames();
        
    }//GEN-LAST:event_addNewSubjectjButtonActionPerformed

    private void subjectjComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_subjectjComboBoxItemStateChanged
        // TODO add your handling code here:
        if(evt.getStateChange()==ItemEvent.SELECTED){
            String selectedSubject = subjectjComboBox.getSelectedItem().toString();
        
        ArrayList<String> subjectIDs = new ArrayList<String>();
        //subjectIDs = SubjectController.searchSubjectIDs(selectedSubject);
        subjectIDs = SubjectController.searchSubjectIDsNot(selectedSubject);
        
        DefaultListModel tempList = new DefaultListModel();
        for(int i=0;i<subjectIDs.size();i++){
            ((DefaultListModel)tempList).addElement(subjectIDs.get(i));
            //System.out.println(subjectIDs.get(i));
        }
        subjectIDLeftjList.setModel(tempList);
        }
    }//GEN-LAST:event_subjectjComboBoxItemStateChanged

    private void addjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addjButtonActionPerformed
        
        if(tNamejTextField.getText().equals("") || degreejComboBox.getSelectedItem().toString().equals("") || tTeljTextField.getText().equals("")){
            JOptionPane.showMessageDialog(null,"Please fill the fields");
        }else{
            String teacherName = tNamejTextField.getText();
            String teacherNIC = tNICTextField.getText();
            int tacherTel = Integer.parseInt(tTeljTextField.getText());
        
            String teacherGender = null;
            if(tMalejRadioButton.isSelected()){
                teacherGender = "Male";
            }else if(tFemalejRadioButton.isSelected()){
                teacherGender = "Female";
            }
            String teacherDegree = degreejComboBox.getSelectedItem().toString();
            ListModel model = subjectIDsRightjList.getModel();
            ArrayList<String> tempArrList = new ArrayList<String>();
        
            for(int i=0; i < model.getSize(); i++){
                String val =  model.getElementAt(i).toString(); 
                tempArrList.add(val);    
            }
            Teacher teacher = new Teacher();
            teacher.setTeacherName(teacherName);
            teacher.setTeacherNIC(teacherNIC);
            teacher.setTeacherTel(tacherTel);
            teacher.setTeacherGender(teacherGender);
            teacher.setTeacherDegree(teacherDegree);
            int insertResultTeacher = TeacherController.addTeacherDetails(teacher);
            int insertResultSubject = SubjectController.addSubjectTeacherDetails(teacherNIC,tempArrList);
        
            if(insertResultTeacher==1 && insertResultSubject==1 ){
                JOptionPane.showMessageDialog(null,"Record inserted");
                reset();
                getTeacherName();
            }else{
                JOptionPane.showMessageDialog(null,"Error");
            }
        }
    }//GEN-LAST:event_addjButtonActionPerformed

    private void searchTeacherjComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_searchTeacherjComboBoxItemStateChanged
        
        if(evt.getStateChange()==ItemEvent.SELECTED){
            String selectedTeacher = searchTeacherjComboBox.getSelectedItem().toString();

            Teacher teacherDetails = new Teacher();
            ArrayList<String> subjectIDs = new ArrayList<String>();
            
            String teacherID = TeacherController.searchTeacherID(selectedTeacher);
            teacherDetails = TeacherController.searchTeacherDetails(teacherID);
            subjectIDs = SubjectController.SearchSubjectIDsFromTeacher(teacherID);
            
            tNamejTextField.setText(teacherDetails.getTeacherName());
            tNICTextField.setText(teacherDetails.getTeacherNIC());
            tTeljTextField.setText(Integer.toString(teacherDetails.getTeacherTel()));
            degreejComboBox.setSelectedItem(teacherDetails.getTeacherDegree());
            
            if("Male".equals(teacherDetails.getTeacherGender())){
                tMalejRadioButton.setSelected(true);
            }else tFemalejRadioButton.setSelected(true);
            
                
                
            DefaultListModel tempList = new DefaultListModel();
            for(int i=0;i<subjectIDs.size();i++){
                ((DefaultListModel)tempList).addElement(subjectIDs.get(i));
                //System.out.println(subjectIDs.get(i));
            }
            subjectIDsRightjList.setModel(tempList);
        }
    }//GEN-LAST:event_searchTeacherjComboBoxItemStateChanged

    private void deletejButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletejButtonActionPerformed
        
        if(tNamejTextField.getText().equals("") || degreejComboBox.getSelectedItem().toString().equals("") || tTeljTextField.getText().equals("")){
            JOptionPane.showMessageDialog(null,"No teacher is selected to delete");
        }else{
        
            String teacherNIC = tNICTextField.getText();
        
            int deleteTeacherResult = TeacherController.deleteTeacher(teacherNIC);
        
            if(deleteTeacherResult==1){
                JOptionPane.showMessageDialog(null,"Record deleted..");
                reset();
                getTeacherName();
            
            }else{
                JOptionPane.showMessageDialog(null,"Error");
            }
        }
        
    }//GEN-LAST:event_deletejButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        
        reset();
       
        
    }//GEN-LAST:event_clearButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TeacherJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TeacherJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TeacherJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TeacherJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TeacherJFrame().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addAlljButton;
    private javax.swing.JButton addNewSubjectjButton;
    private javax.swing.JButton addSelectedjButton;
    private javax.swing.JButton addjButton;
    private javax.swing.JButton clearButton;
    private javax.swing.JComboBox<String> degreejComboBox;
    private javax.swing.JButton deletejButton;
    private javax.swing.ButtonGroup genderbuttonGroup;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton removeAlljButton;
    private javax.swing.JButton removeSelectedjButton;
    private javax.swing.JComboBox<String> searchTeacherjComboBox;
    private javax.swing.ButtonGroup searchbuttonGroup;
    private javax.swing.JList<String> subjectIDLeftjList;
    private javax.swing.JList<String> subjectIDsRightjList;
    private javax.swing.JComboBox<String> subjectjComboBox;
    private javax.swing.JRadioButton tFemalejRadioButton;
    private javax.swing.JRadioButton tMalejRadioButton;
    private javax.swing.JTextField tNICTextField;
    private javax.swing.JTextField tNamejTextField;
    private javax.swing.JTextField tTeljTextField;
    private javax.swing.JButton updatejButton;
    // End of variables declaration//GEN-END:variables

    private void getSubjectNames() {
        
        ArrayList<String> subjectNames = new ArrayList<String>();
        subjectNames.clear();
        subjectjComboBox.removeAllItems();
        subjectNames = SubjectController.searchSubjectNames();
        subjectNames.add(0,"Select Category");
        for(int i=0; i<subjectNames.size();i++){
            
            subjectjComboBox.addItem(subjectNames.get(i));
            
        }
        
    }

    private void getTeacherName() {
        
        ArrayList<String> teacherNames = new ArrayList<String>();
        teacherNames.clear();
        searchTeacherjComboBox.removeAllItems();
        teacherNames = TeacherController.searchTeacherNamesOnly();
        
        teacherNames.add(0,"Select teacher to search");
        for(int i=0; i<teacherNames.size();i++){
            
            searchTeacherjComboBox.addItem(teacherNames.get(i));
            
        }
    }

    private void reset() {
        
        tNamejTextField.setText("");
        tNICTextField.setText("");
        tTeljTextField.setText("");
        degreejComboBox.setSelectedIndex(0);
        searchTeacherjComboBox.setSelectedIndex(0);
        subjectjComboBox.setSelectedIndex(0);
        DefaultListModel listModel = (DefaultListModel) subjectIDLeftjList.getModel();
        listModel.removeAllElements();
        DefaultListModel listModell = (DefaultListModel) subjectIDsRightjList.getModel();
        listModell.removeAllElements();
        
    }
}
